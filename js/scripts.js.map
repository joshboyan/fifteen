{"version":3,"names":[],"mappings":"","sources":["scripts.js"],"sourcesContent":["'use strict';\n\n/*\r\n* This file contains all the function neccesary to build a game board\r\n* and ensure it is mathematically possible to win.\r\n*/\n\nfunction randomBoard() {\n    //Ensure game board array is cleared\n\n    /*/Set game board up 1 move from winning to check win sequence for testing\r\n    gameField = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, null, 15]; //Change this back to 1-15\r\n    */\n\n    //Game piece values for new game\n    gameField = [];\n    var startArr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];\n    while (startArr.length > 0) {\n        //Set picked to a random number from 0 - 14\n        var picked = startArr[Math.ceil(Math.random() * startArr.length) - 1];\n        //Push the game piece that corresponds with the picked number\n        //from the startArr to the gamefield array until all have been placed\n        gameField.push(startArr.splice(startArr.indexOf(picked), 1));\n    }\n    //Set the final space to be blank with null spaceholder\n    gameField.push(null);\n    //Run check to see if the game cannot be won\n    if (!boardCheck()) {\n        //Call the function recursively if the game cannot be won\n        randomBoard();\n    }\n}\n\n// Find the number of permutations for the given board. We compare each piece\n// sequencially to all the other pieces that comes after it from left to right\n// add increment our accummulator when the value of the first piece is greater than\n// the second one. Odd number of permutations is unsolvable.\nfunction boardCheck() {\n    // Grab the value of each game piece in the array\n    var permutations = gameField.reduce(function (reducePrev, reduceCurr, reduceIndex, starting) {\n        // Compare that piece to every other piece on the board\n        starting.map(function (mapCurr, mapIndex) {\n            // If the index of the game piece we grabbed with map is less than the index\n            // of the game piece we grab with reduce; set the map game piece value to 15.\n            // This ensures it is not counted in total permutations regardless of value.\n            if (mapIndex < reduceIndex) mapCurr = 15;\n            // console.log(reducePrev, parseInt(reduceCurr), parseInt(mapCurr));\n            // increment the permutations if the value of our reduce game piece is \n            // greater than the value of our map game piece\n            if (parseInt(reduceCurr) > parseInt(mapCurr)) reducePrev++;\n        });\n        // return total permutations to variable\n        return reducePrev;\n    }, 0);\n    // If the number of permutations is even return true to randomBoard() continue with the game.\n    // If the number is odd a new board is generated.\n    return permutations % 2 === 0;\n}\n\n// Appends acceptable board to the DOM\nfunction buildGameBoard() {\n    var container = document.getElementById('container');\n    var div = void 0;\n    // Builds each game piece when called\n    function gamePieces(id, text) {\n        var pieceValue = document.createTextNode(text);\n        div.appendChild(pieceValue);\n        div.id = id;\n        container.appendChild(div);\n    }\n    // Removes any gamepieces currently on the board\n    while (container.hasChildNodes()) {\n        container.removeChild(container.lastChild);\n    }\n    gameField.forEach(function (field, index) {\n        div = document.createElement('div');\n        div.className = 'box';\n        // Create a game piece for the each element in the random array of 1-15\n        if (field) {\n            gamePieces(index, field);\n            // Create the final blank game piece with a &nbsp; when the array \n            // comes to null at the 16th element\n        } else {\n            gamePieces(field, String.fromCharCode(160));\n        }\n    });\n}\n'use strict';\n\n/*\r\n* All the click events to open and close UI overlays\r\n*/\n\ndocument.getElementById('instructionsTrigger').addEventListener('click', function () {\n    document.getElementById('instructions').classList.remove('close-instructions');\n    ga('send', 'event', 'interface controls', 'click', 'instructions');\n});\n\ndocument.getElementById('closeInstructions').addEventListener('click', function () {\n    document.getElementById('instructions').classList.add('close-instructions');\n});\n\ndocument.getElementById('refresh').addEventListener('click', function () {\n    refresh();\n    ga('send', 'event', 'interface controls', 'click', 'refresh');\n});\n\ndocument.getElementById('timeScores').addEventListener('click', function () {\n    buildScoreBoard('timer', 'timeEntries');\n    document.getElementById('timeScoreBoard').classList.add('open');\n    ga('send', 'event', 'inteface controls', 'click', 'time scores');\n});\n\ndocument.getElementById('exitTimes').addEventListener('click', function () {\n    document.getElementById('timeScoreBoard').classList.remove('open');\n});\n\ndocument.getElementById('exitTimesWin').addEventListener('click', function () {\n    document.getElementById('timeScoreBoard').classList.remove('open');\n    buildScoreBoard('moves', 'moveEntries');\n    document.getElementById('movesScoreBoard').classList.add('open');\n});\n\ndocument.getElementById('moveScores').addEventListener('click', function () {\n    buildScoreBoard('moves', 'moveEntries');\n    document.getElementById('movesScoreBoard').classList.add('open');\n    ga('send', 'event', 'interface controls', 'click', 'moves scores');\n});\n\ndocument.getElementById('exitMoves').addEventListener('click', function () {\n    document.getElementById('movesScoreBoard').classList.remove('open');\n});\n\ndocument.getElementById('exitMovesWin').addEventListener('click', function () {\n    document.getElementById('movesScoreBoard').classList.remove('open');\n    refresh();\n});\n\ndocument.getElementById('info').addEventListener('click', function () {\n    document.getElementById('infoBoard').classList.add('open');\n    ga('send', 'event', 'interface controls', 'click', 'info');\n});\n\ndocument.getElementById('exitInfo').addEventListener('click', function () {\n    document.getElementById('infoBoard').classList.remove('open');\n});\n\ndocument.getElementById('exitYouWin').addEventListener('click', function () {\n    document.getElementById('youWin').classList.remove('open');\n    document.getElementById('yourName').classList.add('open');\n    ga('send', 'event', 'game play', 'win');\n});\n\ndocument.getElementById('exitYourName').addEventListener('click', function (e) {\n    e.preventDefault();\n    document.getElementById('yourName').classList.remove('open');\n    name = document.getElementsByTagName('input')[0].value;\n    winSequence();\n});\n'use strict';\n\n/*\r\n* This file initializes the indexedDB data stores and \r\n* uploads any offline info to the main mongoDB\r\n*/\n\nfunction indexedDB() {\n    // Open an indexedDB database\n    var dbPromise = idb.open('scores', 1, function (upgradeDB) {\n        // Create object store in the database\n        var scores = upgradeDB.createObjectStore('scores', { autoIncrement: true });\n        // Create keys to query database\n        scores.createIndex('timer', 'timer');\n        scores.createIndex('moves', 'moves');\n    }).catch(function (err) {\n        console.error(err);\n    });\n\n    var dbPromiseOffline = idb.open('offline', 1, function (upgradeDB) {\n        // Create object store in the database\n        var offline = upgradeDB.createObjectStore('offline', { autoIncrement: true });\n    }).then(function (db) {\n        // Create a transaction\n        var tx = db.transaction('offline');\n        // Open up the object store\n        var store = tx.objectStore('offline');\n        // Get all the objects\n        return store.getAll();\n    }).then(function (offline) {\n        offline.forEach(function (score) {\n            fetch('/api/scores', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(offline)\n            });\n            console.log(\"The following entry has been made to mongo: \", offline);\n        });\n    }).then(function () {\n        // Empty the offline object store\n        idb.open('offline', 1).then(function (db) {\n            var tx = db.transaction('offline', 'readwrite');\n            var offline = tx.objectStore('offline', 'readwrite');\n            offline.clear();\n        });\n    }).catch(function (err) {\n        console.error(\"There was an error updating mongo with offline scores. \", err);\n    });\n\n    // (Don't think I need this anymore)Get the number of score entries for internal use\n    dbPromise.then(function (db) {\n        // Create a new transaction\n        var tx = db.transaction('scores', 'readwrite');\n        // Select the object store to work with\n        var scores = tx.objectStore('scores', 'readwrite');\n        //Get the number of entries n the objectStore\n        entryCount = scores.count();\n        return entryCount;\n    }).catch(function (err) {\n        console.error(err);\n    });\n}\n\n// Get all the data from mongo and put in indexedDB access under low connectivity\nfunction mongo() {\n    // Get the scores form mongo\n    fetch('/api/scores').then(function (rankings) {\n        // Parse the repsonse into JSON\n        return rankings.json();\n    }).then(function (data) {\n        console.log(data);\n        // Clear mongo and add all the data from mongo\n        idb.open('scores', 1).then(function (db) {\n            var tx = db.transaction('scores', 'readwrite');\n            scores = tx.objectStore('scores', 'readwrite');\n            var indexedDBBackup = scores.clear();\n            data.forEach(function (score) {\n                scores.add(score);\n            });\n            return indexedDBBackup;\n            // If there is an error fetching mongo scores, repopulate indexedDB with old data    \n        }).catch(function (indexedDBBackup) {\n            indexedDBBackup.forEach(function (elem) {\n                scores.add(elem);\n            });\n            console.log('Repopulating indexedDB with scores');\n        });\n    }).catch(function (err) {\n        console.error(\"There was a problem communicating with the database\", err);\n    });\n}\n'use strict';\n\n/* \r\n* This file contains the functions that deal with the user interacting \r\n* with the game.\r\n*/\n\n// Move the peices around the board\nfunction appendEvent() {\n    // Get all of the game pieces\n    var tiles = document.getElementsByClassName('box');\n    // Convert tiles from an array-like object ot an array\n    tiles = Array.prototype.slice.call(tiles, 0);\n    // Loop through all of the game pieces\n    tiles.map(function (tile) {\n        // Add click event to all game pieces\n        tile.addEventListener('click', function (e) {\n            // Set targetIdto the game piece the user clicked \n            var targetId = parseInt(e.target.id);\n            // If the game piece the user clicked is a legal move\n            if (checkEmpty(targetId)) {\n                // Set the blank piece to the targetId the user clicked\n                gameField[gameField.indexOf(null)] = gameField[targetId];\n                // Remove the game piece value from targetId\n                gameField[targetId] = null;\n                console.log(entryCount);\n                ga('send', 'event', 'game play', 'click');\n                // Render game board with new positions\n                buildGameBoard();\n                // Winning condition check if pieces are in numerical order\n                winCheck();\n                // Call function recursivley until winning condition is met\n                appendEvent();\n            }\n        });\n    });\n}\n\nfunction checkEmpty(targetId) {\n    // Position of the blank space\n    var blankSpace = gameField.indexOf(null);\n    // Check if the blank space is to the left, right, \n    // top or bottom(respectively) of the game piece clicked\n    if (blankSpace === targetId - 1 || blankSpace === targetId + 1 || blankSpace === targetId - 4 || blankSpace === targetId + 4) {\n        // Increment the counter and update the DOM\n        document.getElementById('counter').innerHTML = 'Moves:' + counter++;\n        return true;\n    }\n}\n'use strict';\n\n/*\r\n* This file fetches all the scores from the database and builds\r\n* the ranking boards. If the user is offline it defaults to the \r\n* scores stored in indexedDB\r\n*/\n\nfunction buildScoreBoard(type, board) {\n  // Open indexedDB\n  idb.open('scores', 1).then(function (db) {\n    // Create a transaction\n    var tx = db.transaction('scores');\n    // open up the object store\n    var store = tx.objectStore('scores');\n    // Specify the index to use\n    var myIndex = store.index(type);\n    // Get all the entries ordered by the index\n    return myIndex.getAll();\n  }).then(function (rankings) {\n    // Create the board in the DOM\n    populateScoreBoard(rankings);\n  }).catch(function (err) {\n    console.error(err);\n  });\n  // Create the board in the DOM\n  function populateScoreBoard(rankings) {\n    // Clean everything of the board\n    board = document.getElementById(board);\n    while (board.hasChildNodes()) {\n      board.removeChild(board.lastChild);\n    }\n    // Format each database key into an html entry for the score boards\n    rankings.forEach(function (rank, index) {\n      var node = document.createElement('div');\n      //console.log(rank.key);\n      //console.log(entryCount);\n      if (entryCount > 3 && rank.key == entryCount - 1) {\n        node.classList.add('latest');\n      }\n      node.innerHTML = '<span>' + (index + 1) + ')</span><span>' + rank.name + '</span><span>' + rank[type] + '</span>';\n      board.appendChild(node);\n    });\n  }\n}\n'use strict';\n\n/*jshint esversion: 6,  browser: true, devel: true, strict: true*/\nrequire('whatwg-fetch');\nvar idb = require('idb');\nvar gameField = [];\nvar compareArr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, null];\nvar counter = 1;\nvar winCount = 0;\nvar seconds = 0;\nvar minutes = 0;\nvar name;\nvar time;\nvar scores;\nvar entryCount;\n\n/*/ Hide URL paramenter if user hits enter after inputting initials\r\nif(typeof window.history.pushState == 'function') {\r\n    window.history.pushState({}, \"Hide\", \"https://fifteen-puzzle.herokuapp.com\");\r\n}*/\n\n// Start/Restart the game\nfunction refresh() {\n    randomBoard();\n    buildGameBoard();\n    appendEvent();\n    removeTimer();\n    gameTimer();\n    // Set the scoreboard \"x's\" to just close overlay\n    document.getElementById('exitTimesWin').style.display = 'none';\n    document.getElementById('exitTimes').style.display = 'block';\n    document.getElementById('exitMovesWin').style.display = 'none';\n    document.getElementById('exitMoves').style.display = 'block';\n}\n\n// Start the initial game\nrefresh();\n// Initialize data stores in browser\nindexedDB();\n// Get scores from mongoDB\nmongo();\n'use strict';\n\nvar SpeedTest = function SpeedTest(testImplement, testParams, repetitions) {\n  this.testImplement = testImplement;\n  this.testParams = testParams;\n  this.repetitions = repetitions || 10000;\n  this.average = 0;\n};\n\nSpeedTest.prototype = {\n  startTest: function startTest() {\n    if (this.testImplement(this.testParams) === false) {\n      alert('Test failed with those parameters.');\n      return;\n    }\n    var beginTime,\n        endTime,\n        sumTimes = 0;\n    for (var i = 0, x = this.repetitions; i < x; i++) {\n      beginTime = +new Date();\n      this.testImplement(this.testParams);\n      endTime = +new Date();\n      sumTimes += endTime - beginTime;\n    }\n    this.average = sumTimes / this.repetitions;\n    return console.log('Average execution across ' + this.repetitions + ': ' + this.average);\n  }\n};\n'use strict';\n\nif ('serviceWorker' in navigator) {\n  navigator.serviceWorker.register('/sw.js', { scope: '/' }).then(function (reg) {\n    // registration worked\n    console.log('Registration succeeded. Scope is ' + reg.scope);\n  }).catch(function (err) {\n    // registration failed\n    console.error('Registration failed with ' + err);\n  });\n}\n'use strict';\n\n/*\r\n* This file deals with the game timer\r\n*/\n\nfunction removeTimer() {\n    // Remove old timer and create a p element to hold the new one\n    // created in gameTimer\n    document.getElementById('timer').remove(timer);\n    var newTimer = document.createElement('p');\n    newTimer.id = 'timer';\n    document.getElementById('gameStats').appendChild(newTimer);\n}\n\n// Instanciate timer\nfunction gameTimer() {\n    var timer = document.getElementById('timer');\n    // set timer to 0\n    seconds = 0;\n    minutes = 0;\n    // Get initial time value\n    var start = new Date().getTime();\n    window.setInterval(function () {\n        //Find how much time has elasped between ow and starting time\n        time = new Date().getTime() - start;\n        // Set the timer interval to 1000ms === 1s\n        seconds = Math.round(time / 1000 + 0.5);\n        // Ensure seconds always appear in 2 digit format\n        if (seconds > 9) {\n            timer.innerHTML = minutes + ':' + seconds;\n        } else {\n            timer.innerHTML = minutes + ':0' + seconds;\n        }\n        // Increment the minutes and set seconds to 0 after 59\n        if (seconds > 59) {\n            minutes++;\n            seconds = 0;\n            // Restart timer\n            start = new Date().getTime();\n        }\n        return time;\n        // Set the timer interval to 1000ms === 1s\n    }, 1000);\n}\n'use strict';\n\n/*\r\n* This file contains functions that check for winning conditions and \r\n* execute the win sequence if met\r\n*/\n\nfunction winCheck() {\n    // Get the initial count from the DB\n    if (winCount === 0) {\n        entryCount = entryCount.request.result;\n    }\n    //variable to store the number of elements that match between\n    //compareArr and gameField\n    var matchCounter = 0;\n    // Check that each element in the gameField array matches\n    // the compareArr winning condition            \n    compareArr.forEach(function (element, index) {\n        if (parseInt(element) === parseInt(gameField[index])) {\n            matchCounter++;\n        }\n    });\n    if (matchCounter === 15) {\n        // Display the screen that says you win and enter name form\n        document.getElementById('youWin').classList.add('open');\n        document.getElementById('name').autofocus = true;\n        // Script to autofocus cursor in browsers without native support;\n        if (!('autofocus' in document.createElement('input'))) {\n            document.getElementById('name').focus();\n        }\n    }\n    // Increment the counts\n    winCount++;\n}\n\nfunction winSequence() {\n    // Set the details of the game\n    var gameStats = {\n        moves: counter,\n        timer: Math.floor(time / 1000),\n        name: name,\n        key: entryCount\n    };\n    console.log('You Win!!');\n    removeTimer();\n    // Initialize a new game\n    counter = 0;\n    document.getElementById('counter').innerHTML = 'Moves:0';\n\n    // Add the info from this game to the DB\n    idb.open('scores', 1).then(function (db) {\n        // This updates the scores for the in-browser scoreboards\n        // while the user is offline\n        var tx = db.transaction('scores', 'readwrite');\n        var scores = tx.objectStore('scores', 'readwrite');\n        scores.add(gameStats);\n    }).then(function () {\n        console.log(\"The following entry has been made to indexedDB: \", gameStats);\n        if (window.navigator.onLine) {\n            fetch('/api/scores', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(gameStats)\n            }).then(function () {\n                console.log(\"The following entry has been made to mongoDB: \", gameStats);\n            }).catch(function (err) {\n                console.log(err);\n            });\n        } else {\n            idb.open('offline', 1).then(function (db) {\n                var tx = db.transaction('offline', 'readwrite');\n                var offline = tx.objectStore('offline', 'readwrite');\n                offline.add(gameStats);\n            }).then(function () {\n                console.log(\"the following entry has bee added to indexedDB.offline\", gameStats);\n            }).catch(function (err) {\n                console.error(err);\n            });\n        }\n    }).catch(function (err) {\n        console.error(err);\n    });\n\n    // Increment the counter for the idb key\n    entryCount++;\n    // Set timeScoreBoard \"x\" to open movesScoreBoard\n    document.getElementById('exitTimes').style.display = 'none';\n    document.getElementById('exitTimesWin').style.display = 'block';\n    // Set movesScoreBoard \"x\" to restart the game\n    document.getElementById('exitMoves').style.display = 'none';\n    document.getElementById('exitMovesWin').style.display = 'block';\n    // Open time score board\n    buildScoreBoard('timer', 'timeEntries');\n    document.getElementById('timeScoreBoard').classList.add('open');\n}"],"file":"scripts.js"}